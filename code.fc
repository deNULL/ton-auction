;; Multi-signature wallet smart contract

() recv_internal(slice in_msg) impure {
  
}

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (msg_seqno, valid_until, action) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32));
  throw_if(35, valid_until < now());

  var ds = get_data().begin_parse();
  var stored_seqno = ds~load_uint(32);
  throw_unless(33, msg_seqno == stored_seqno);

  var owner_pubkey = ds~load_uint(256);
  throw_unless(34, check_signature(slice_hash(in_msg), signature, owner_pubkey));

  accept_message();

  var notification_addr = ds~load_uint(256);
  var auctions = ds~load_dict();

  if (action == 1) {

  }

  set_data(
    begin_cell()
      .store_uint(stored_seqno + 1, 32)
      .store_uint(owner_pubkey, 256)
      .store_uint(notification_addr, 256)
      .store_dict(auctions)
    .end_cell()
  );
}

;; Returns current sequence number

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}