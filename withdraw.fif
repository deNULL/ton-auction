#!/usr/bin/env fift -s
"auction-utils.fif" include

{ ."<contract> <dest-addr> <seqno> <amount> [-B <body-boc>] [-O <output-boc>] [-b] [-M <send-mode>]" cr
  ."Creates a money withdrawal request to an auction contract, with address loaded from file <contract>.addr "
  ."and private keys from <contract>.pk, and saves it into <output-boc>.boc ('<contract>-query.boc' by default)." cr
  ."Switch -b disables bounce flag (enabled by default), and option -M allows to set send mode for future message."
} : usage()

// == Parsing command-line arguments

{
  "-B" "--body-file" 1 { =: BodyFile } option-long()
  "-O" "--output-file" 1 { =: SaveFile } option-long()
  "-M" "--send-mode" 1 { parse-int =: SendMode } option-long()
  "-b" "--no-bounce" { false =: BounceFlag } switch-long()

  1 { =: BaseFile } nth-argument()
  2 { =: DestRaw } nth-argument()
  3 { parse-int =: SeqNo } nth-argument()
  4 { $>GR =: Amount } nth-argument()
  no-more-arguments()
} scan-args()
4 < { show-usage() } if // Checks that there's enough arguments

// == End of parsing command-line arguments

true =:? BounceFlag
3 =:? SendMode
DestRaw BounceFlag parse-load-address =: BounceFlag 2=: DestAddr
BaseFile +"-query" =:? SaveFile

def? BodyFile {
  @' BodyFile +".boc" file>B B>boc
} {
  <b 0 32 u, b>
} cond =: TransferBody

BaseFile +".addr" load-address
2dup 2constant ContractAddr
."Source contract address = " 2dup .addr cr 6 .Addr cr

BaseFile +".pk" load-keypair
=: PrivateKey
=: PublicKey

."Creating new order to transfer " Amount .GR ."to account " DestAddr 2dup BounceFlag 7 + .Addr ." = " .addr 
."seqno=0x" SeqNo x. ."bounce=" BounceFlag . cr

."Body of transfer message is " TransferBody <s csr. cr
  
// Create actual message to be sent
<b
  b{01} s, BounceFlag 1 i, b{000100} s, DestAddr addr, Amount Gram, 0 9 64 32 + + 1+ u, 
  TransferBody <s 2dup s-fits? not rot over 1 i, -rot { drop TransferBody ref, } { s, } cond
b> =: IntMessage

."Internal message: " IntMessage <s csr. cr

ContractAddr null
<b
  SeqNo 32 u,
  -1 32 i,
  1 32 u,     // action = 1: withdraw
  SendMode 8 u,
  IntMessage ref,
b> PrivateKey sign-message()
external-message() =: ExtMessage

."Withdrawal external message: " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr